def cropCoords(pixelList, OGimageSize):
	left = 1e9
	right = -1
	upper = 1e9
	lower = -1
	colCount = 0
	rowCount = 0
	for p in pixelList:
		if colCount == OGimageSize:
			colCount = 0
			rowCount += 1
		if p == 0:
			if colCount > right:
				right = colCount
			if colCount < left:
				left = colCount
			if rowCount > lower:
				lower = rowCount
			if rowCount < upper:
				upper = rowCount
		colCount += 1
	return left, right, upper, lower

def getPixels(imagedata):
	from PIL import Image 
	import cStringIO
	import base64
	pic = cStringIO.StringIO()

	image_string = cStringIO.StringIO(imagedata.decode('base64'))

	image = Image.open(image_string)

	imageSize = 400
	test = image.resize((imageSize,imageSize), Image.ANTIALIAS).convert('1')
	pixels = list(test.getdata())
	if 0 in pixels: #If image isn't empty
		left, right, upper, lower = cropCoords(pixels, imageSize)
		test = test.crop((left, upper, right, lower))
		imageSize = 16
		test = test.resize((imageSize,imageSize), Image.ANTIALIAS).convert('1')
		pix = list(test.getdata())
		newpix = []
		#Change to pixel data to binary
		for p in pix:
			if p == 255:
				newpix.append(-1)
			else:
				newpix.append(1)
		pixelData = []
		pixelData.append(newpix)
	return pixelData
# imagedata = ""
# print getPixels(imagedata)
